import{_ as e,c as s,o as t,a}from"./app.c45f2071.js";const k='{"title":"Request Methods","description":"","frontmatter":{},"headers":[{"level":2,"title":"Request Methods","slug":"request-methods"},{"level":2,"title":"Request Methods (Optional)","slug":"request-methods-optional"},{"level":2,"title":"Request Steps","slug":"request-steps"},{"level":3,"title":"1. Request Initiated","slug":"_1-request-initiated"},{"level":3,"title":"2. Request Processing","slug":"_2-request-processing"},{"level":3,"title":"3. Response Returned","slug":"_3-response-returned"},{"level":3,"title":"4. Response Processing","slug":"_4-response-processing"},{"level":3,"title":"5. Make Additional Calls","slug":"_5-make-additional-calls"},{"level":3,"title":"6. Resolve Promise","slug":"_6-resolve-promise"},{"level":2,"title":"Examples","slug":"examples"},{"level":3,"title":"Login","slug":"login"},{"level":3,"title":"Fetch","slug":"fetch"},{"level":3,"title":"Register","slug":"register"},{"level":2,"title":"Create Custom Requests","slug":"create-custom-requests"}],"relativePath":"guide/requests.md","lastUpdated":1740801359000}',n={},o=a(`<p>How requests are made is central to the vue-auth3 plugin so it&#39;s important to understand the request/response lifecycle.</p><p>Under the hood, all requests to the API are made using the HTTP driver and all of the methods will always return a <code>Promise</code> by <code>axios</code>.</p><p>For more details on individual method options check the <a href="/options/core.html">Options Guide</a> and <a href="/methods/overview.html">Methods Guide</a>.</p><h2 id="request-methods" tabindex="-1">Request Methods <a class="header-anchor" href="#request-methods" aria-hidden="true">#</a></h2><p>These will always fire off a request.</p><ul><li><a href="/methods/register-and-login.html#register">auth.register()</a></li><li><a href="/methods/register-and-login.html#login">auth.login()</a></li><li><a href="/methods/register-and-login.html#oauth2">auth.oauth2()</a></li><li><a href="/methods/user-data.html#fetch">auth.fetch()</a></li><li><a href="/methods/utils.html#refresh">auth.refresh()</a></li><li><a href="/methods/impersonating.html#impersonate">auth.impersonate()</a></li></ul><h2 id="request-methods-optional" tabindex="-1">Request Methods (Optional) <a class="header-anchor" href="#request-methods-optional" aria-hidden="true">#</a></h2><p>By default these will not fire off a request. In order to do so the <code>makeRequest</code> option must be set to <code>true</code>.</p><ul><li><a href="/methods/register-and-login.html#unimpersonate">unimpersonate()</a></li><li><a href="/methods/register-and-login.html#logout">logout()</a></li></ul><h2 id="request-steps" tabindex="-1">Request Steps <a class="header-anchor" href="#request-steps" aria-hidden="true">#</a></h2><p>Every request follows 6 basic steps which sometimes repeat if additional calls need to be made.</p><h3 id="_1-request-initiated" tabindex="-1">1. Request Initiated <a class="header-anchor" href="#_1-request-initiated" aria-hidden="true">#</a></h3><p>The request is initiated by the HTTP plugin used in the app. When making a method call with the VueAuth3 plugin this would route through the HTTP driver.</p><h3 id="_2-request-processing" tabindex="-1">2. Request Processing <a class="header-anchor" href="#_2-request-processing" aria-hidden="true">#</a></h3><p>The request intercept fires and checks if a token is set. If set it will pass execution on to the auth driver <code>request</code> method. In there it formats the token for the request.</p><h3 id="_3-response-returned" tabindex="-1">3. Response Returned <a class="header-anchor" href="#_3-response-returned" aria-hidden="true">#</a></h3><p>The HTTP plugin used in the app should receive a response. If this call was initiated by the vue-auth3 plugin this would continue to be routed via the HTTP driver.</p><h3 id="_4-response-processing" tabindex="-1">4. Response Processing <a class="header-anchor" href="#_4-response-processing" aria-hidden="true">#</a></h3><p>The response intercept will fire and attempt to parse a token if set. If set it will then use the appropriate storage method to store the token for future requests.</p><h3 id="_5-make-additional-calls" tabindex="-1">5. Make Additional Calls <a class="header-anchor" href="#_5-make-additional-calls" aria-hidden="true">#</a></h3><p>If we are making requests through a method in the vue-auth3 plugin there may be additional calls made. For instance with the login call we may fire a subsequent <code>fetch</code> call. If this is a regular app call this step is omitted.</p><h3 id="_6-resolve-promise" tabindex="-1">6. Resolve Promise <a class="header-anchor" href="#_6-resolve-promise" aria-hidden="true">#</a></h3><p>Finally after all calls are made the promise will resolve and return control back to the initial call.</p><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><p>Let&#39;s take a look at a few examples for some of the more commonly used vue-auth3 plugin methods.</p><h3 id="login" tabindex="-1">Login <a class="header-anchor" href="#login" aria-hidden="true">#</a></h3><p>The call to the login method will help to illustrate things a bit better.</p><div class="language-ts"><pre><code>auth
  <span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// Request initiated.</span>
  <span class="token comment">// Request intercept has no token so skips.</span>
  <span class="token comment">// Response returned by API.</span>
  <span class="token comment">// Response intercept parses token if set.</span>
  <span class="token comment">// Fire off $auth.fetch() if \`fetchUser\` is enabled.</span>
  <span class="token comment">// Resolve Promise.</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="fetch" tabindex="-1">Fetch <a class="header-anchor" href="#fetch" aria-hidden="true">#</a></h3><p>With the fetch method it follows a similar pattern to the login method call. However, in this case step 5 is omitted since the fetch call doesn&#39;t provide any special options for any additional calls.</p><div class="language-ts"><pre><code>auth
  <span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// Request initiated.</span>
  <span class="token comment">// Request intercept formats token.</span>
  <span class="token comment">// Response returned by API.</span>
  <span class="token comment">// Response intercept has no token so skips.</span>
  <span class="token comment">// Step 5 omitted.</span>
  <span class="token comment">// Resolve Promise.</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="register" tabindex="-1">Register <a class="header-anchor" href="#register" aria-hidden="true">#</a></h3><p>We can take a look at the register call as well and see that it follows a similar pattern as the login call. The only difference here being that it may makes two additional calls if <code>autoLogin</code> is enabled.</p><div class="language-ts"><pre><code>auth
  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// Request initiated.</span>
  <span class="token comment">// Request intercept has no token so skips.</span>
  <span class="token comment">// Response returned by API.</span>
  <span class="token comment">// Response intercept parses token if set.</span>
  <span class="token comment">// Fire off $auth.login() if \`autoLogin\` is enabled.</span>
  <span class="token comment">// Fire off $auth.fetch() if \`fetchUser\` is enabled.</span>
  <span class="token comment">// Resolve Promise.</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="create-custom-requests" tabindex="-1">Create Custom Requests <a class="header-anchor" href="#create-custom-requests" aria-hidden="true">#</a></h2><p>You can make an authenticated request through VueAuth3</p><div class="language-ts"><pre><code>auth<span class="token punctuation">.</span><span class="token function">http</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  url<span class="token operator">:</span> <span class="token string">&quot;users/1/fetch&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,37),i=[o];function l(p,r,c,u,h,d){return t(),s("div",null,i)}var f=e(n,[["render",l]]);export{k as __pageData,f as default};
